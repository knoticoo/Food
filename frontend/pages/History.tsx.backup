import React, { useState, useEffect } from 'react';
import { format, subDays, startOfWeek, subWeeks, subMonths, startOfMonth, endOfMonth } from 'date-fns';
import { ru } from 'date-fns/locale';
import { 
  Calendar, 
   
  CheckCircle, 
  AlertCircle,
  Filter,
  Search,
  TrendingUp,
  BarChart3,
  Download,
  Eye,
  CalendarDays,
  Activity,
  Target,
  Star,
  StarOff
} from 'lucide-react';
import { usePetContext } from '../context/PetContext';
import { useNotification } from '../context/NotificationContext';
import { useTheme } from '../context/ThemeContext';
import { Task, TaskLog } from '../types';
import { tasksAPI, taskLogsAPI, analyticsAPI } from '../utils/api';
import Modal from '../components/ui/Modal';

const History: React.FC = () => {
  const { state, dispatch } = usePetContext();
  const { showNotification } = useNotification();
  const { theme, toggleTheme } = useTheme();
  
  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'custom'>('week');
  const [customStartDate, setCustomStartDate] = useState(format(subDays(new Date(), 7), 'yyyy-MM-dd'));
  const [customEndDate, setCustomEndDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [filterPet, setFilterPet] = useState<string>('all');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [showTaskDetails, setShowTaskDetails] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [taskLogs, setTaskLogs] = useState<TaskLog[]>([]);
  const [loading, setLoading] = useState(true);
  // const [analytics, setAnalytics] = useState<any>(null);

  useEffect(() => {
    loadHistoryData();
  }, [selectedPeriod, customStartDate, customEndDate, filterPet, filterType, filterStatus, searchTerm]);

  const loadHistoryData = async () => {
    try {
      setLoading(true);
      
      const startDate = getStartDate();
      const endDate = getEndDate();
      
      const params: any = {
        startDate: format(startDate, 'yyyy-MM-dd'),
        endDate: format(endDate, 'yyyy-MM-dd'),
        petId: filterPet !== 'all' ? filterPet : undefined,
        type: filterType !== 'all' ? filterType : undefined,
        status: filterStatus !== 'all' ? filterStatus : undefined
      };
      
      const [tasks, logs] = await Promise.all([
        tasksAPI.getAll(params),
        taskLogsAPI.getAll(params)
      ]);
      
      dispatch({ type: 'SET_TASKS', payload: tasks });
      setTaskLogs(logs);
    } catch (error) {
      showNotification('error', 'Error', 'Failed to load history data');
    } finally {
      setLoading(false);
    }
  };

  const getStartDate = () => {
    switch (selectedPeriod) {
      case 'week':
        return startOfWeek(subWeeks(new Date(), 1), { locale: ru });
      case 'month':
        return startOfMonth(subMonths(new Date(), 1));
      case 'custom':
        return new Date(customStartDate);
      default:
        return startOfWeek(subWeeks(new Date(), 1), { locale: ru });
    }
  };

  const getEndDate = () => {
    switch (selectedPeriod) {
      case 'week':
        return new Date();
      case 'month':
        return endOfMonth(new Date());
      case 'custom':
        return new Date(customEndDate);
      default:
        return new Date();
    }
  };

  const getTaskIcon = (type: string) => {
    switch (type) {
      case 'feeding': return 'üçΩÔ∏è';
      case 'walk': return 'üö∂';
      case 'play': return 'üéæ';
      case 'treat': return 'üçñ';
      case 'medication': return 'üíä';
      case 'grooming': return 'üõÅ';
      case 'vet': return 'üè•';
      default: return 'üìù';
    }
  };

  const getTaskTypeName = (type: string) => {
    switch (type) {
      case 'feeding': return '–ö–æ—Ä–º–ª–µ–Ω–∏–µ';
      case 'walk': return '–ü—Ä–æ–≥—É–ª–∫–∞';
      case 'play': return '–ò–≥—Ä–∞';
      case 'treat': return '–õ–∞–∫–æ–º—Å—Ç–≤–æ';
      case 'medication': return '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ';
      case 'grooming': return '–£—Ö–æ–¥';
      case 'vet': return '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä';
      default: return '–î—Ä—É–≥–æ–µ';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high': return <Star className="text-red-500" size={16} />;
      case 'medium': return <Star className="text-yellow-500" size={16} />;
      case 'low': return <StarOff className="text-gray-400" size={16} />;
      default: return null;
    }
  };

  const getTaskStatus = (task: Task) => {
    if (task.completedAt) return 'completed';
    const now = new Date();
    const taskTime = new Date(task.scheduledTime);
    return taskTime < now ? 'overdue' : 'pending';
  };

  const getFilteredTasks = () => {
    const startDate = getStartDate();
    const endDate = getEndDate();
    
    return state.tasks.filter(task => {
      const taskDate = new Date(task.scheduledTime);
      const isInPeriod = taskDate >= startDate && taskDate <= endDate;
      const matchesPet = filterPet === 'all' || task.petId === filterPet;
      const matchesType = filterType === 'all' || task.type === filterType;
      const matchesStatus = filterStatus === 'all' || getTaskStatus(task) === filterStatus;
      const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase());
      
      return isInPeriod && matchesPet && matchesType && matchesStatus && matchesSearch;
    });
  };

  const getCompletionRate = () => {
    const tasks = getFilteredTasks();
    const completed = tasks.filter(task => task.completedAt);
    return tasks.length > 0 ? Math.round((completed.length / tasks.length) * 100) : 0;
  };

  const getTasksByType = () => {
    const tasks = getFilteredTasks();
    const typeStats: { [key: string]: number } = {};
    
    tasks.forEach(task => {
      typeStats[task.type] = (typeStats[task.type] || 0) + 1;
    });
    
    return Object.entries(typeStats).map(([type, count]) => ({
      type,
      count,
      name: getTaskTypeName(type)
    }));
  };

  const openTaskDetails = async (task: Task) => {
    setSelectedTask(task);
    setShowTaskDetails(true);
    
    try {
      const logs = await taskLogsAPI.getAll({ taskId: task.id });
      setTaskLogs(logs);
    } catch (error) {
      showNotification('error', 'Error', 'Failed to load task details');
    }
  };

  const exportHistory = () => {
    const tasks = getFilteredTasks();
    const exportData = {
      period: selectedPeriod,
      startDate: format(getStartDate(), 'yyyy-MM-dd'),
      endDate: format(getEndDate(), 'yyyy-MM-dd'),
      tasks: tasks.map(task => ({
        id: task.id,
        title: task.title,
        type: task.type,
        scheduledTime: task.scheduledTime,
        completedAt: task.completedAt,
        priority: task.priority,
        petName: state.pets.find(p => p.id === task.petId)?.name
      })),
      statistics: {
        total: tasks.length,
        completed: tasks.filter(t => t.completedAt).length,
        completionRate: getCompletionRate(),
        byType: getTasksByType()
      }
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pet-care-history-${format(new Date(), 'yyyy-MM-dd')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('success', 'History Exported', 'History data has been exported successfully');
  };

  const tasks = getFilteredTasks();
  const completionRate = getCompletionRate();
  const tasksByType = getTasksByType();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="loading"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-text-primary">–ò—Å—Ç–æ—Ä–∏—è</h1>
          <p className="text-text-secondary mt-1">
            –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
          </p>
        </div>
        <div className="flex items-center gap-3">
          <button
            onClick={toggleTheme}
            className="theme-toggle"
            title={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
          >
            {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
          </button>
          <button
            onClick={exportHistory}
            className="btn btn-secondary"
          >
            <Download size={20} />
            –≠–∫—Å–ø–æ—Ä—Ç
          </button>
        </div>
      </div>

      {/* Period Selection */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-text-primary">–ü–µ—Ä–∏–æ–¥</h2>
          <button
            onClick={() => setShowFilters(!showFilters)}
            className="btn btn-secondary btn-sm"
          >
            <Filter size={16} />
            {showFilters ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
          <button
            onClick={() => setSelectedPeriod('week')}
            className={`p-3 rounded-lg border transition-colors ${
              selectedPeriod === 'week'
                ? 'border-primary bg-primary/10 text-primary'
                : 'border-border hover:bg-surface-hover'
            }`}
          >
            <div className="text-center">
              <CalendarDays size={20} className="mx-auto mb-2" />
              <div className="font-medium">–ù–µ–¥–µ–ª—è</div>
              <div className="text-sm text-text-secondary">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</div>
            </div>
          </button>

          <button
            onClick={() => setSelectedPeriod('month')}
            className={`p-3 rounded-lg border transition-colors ${
              selectedPeriod === 'month'
                ? 'border-primary bg-primary/10 text-primary'
                : 'border-border hover:bg-surface-hover'
            }`}
          >
            <div className="text-center">
              <Calendar size={20} className="mx-auto mb-2" />
              <div className="font-medium">–ú–µ—Å—è—Ü</div>
              <div className="text-sm text-text-secondary">–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</div>
            </div>
          </button>

          <button
            onClick={() => setSelectedPeriod('custom')}
            className={`p-3 rounded-lg border transition-colors ${
              selectedPeriod === 'custom'
                ? 'border-primary bg-primary/10 text-primary'
                : 'border-border hover:bg-surface-hover'
            }`}
          >
            <div className="text-center">
              <BarChart3 size={20} className="mx-auto mb-2" />
              <div className="font-medium">–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π</div>
              <div className="text-sm text-text-secondary">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</div>
            </div>
          </button>

          <div className="p-3 bg-surface-hover rounded-lg">
            <div className="text-center">
              <Target size={20} className="mx-auto mb-2 text-success" />
              <div className="font-medium text-success">{completionRate}%</div>
              <div className="text-sm text-text-secondary">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </div>
          </div>
        </div>

        {selectedPeriod === 'custom' && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</label>
              <input
                type="date"
                className="input"
                value={customStartDate}
                onChange={(e) => setCustomStartDate(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞</label>
              <input
                type="date"
                className="input"
                value={customEndDate}
                onChange={(e) => setCustomEndDate(e.target.value)}
              />
            </div>
          </div>
        )}

        {showFilters && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ü–∏—Ç–æ–º–µ—Ü</label>
              <select
                className="input"
                value={filterPet}
                onChange={(e) => setFilterPet(e.target.value)}
              >
                <option value="all">–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã</option>
                {state.pets.map(pet => (
                  <option key={pet.id} value={pet.id}>{pet.name}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">–¢–∏–ø –∑–∞–¥–∞—á–∏</label>
              <select
                className="input"
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
              >
                <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                <option value="feeding">–ö–æ—Ä–º–ª–µ–Ω–∏–µ</option>
                <option value="walk">–ü—Ä–æ–≥—É–ª–∫–∞</option>
                <option value="play">–ò–≥—Ä–∞</option>
                <option value="treat">–õ–∞–∫–æ–º—Å—Ç–≤–æ</option>
                <option value="medication">–õ–µ–∫–∞—Ä—Å—Ç–≤–æ</option>
                <option value="grooming">–£—Ö–æ–¥</option>
                <option value="vet">–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä</option>
                <option value="other">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">–°—Ç–∞—Ç—É—Å</label>
              <select
                className="input"
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
              >
                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
                <option value="overdue">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</option>
              </select>
            </div>
          </div>
        )}

        <div className="flex items-center gap-2 flex-1 max-w-xs mt-4">
          <Search size={16} className="text-text-muted" />
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."
            className="input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-text-secondary">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</p>
              <p className="text-2xl font-bold text-text-primary">{tasks.length}</p>
            </div>
            <div className="p-3 bg-primary/10 rounded-full">
              <Activity className="text-primary" size={24} />
            </div>
          </div>
        </div>

        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-text-secondary">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
              <p className="text-2xl font-bold text-text-primary">
                {tasks.filter(task => task.completedAt).length}
              </p>
            </div>
            <div className="p-3 bg-success/10 rounded-full">
              <CheckCircle className="text-success" size={24} />
            </div>
          </div>
        </div>

        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-text-secondary">–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
              <p className="text-2xl font-bold text-text-primary">{completionRate}%</p>
            </div>
            <div className="p-3 bg-info/10 rounded-full">
              <TrendingUp className="text-info" size={24} />
            </div>
          </div>
        </div>
      </div>

      {/* Analytics */}
      {tasksByType.length > 0 && (
        <div className="card">
          <h2 className="text-lg font-semibold text-text-primary mb-4">–ó–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º</h2>
          <div className="space-y-4">
            {tasksByType.map(({ type, count, name }) => {
              const percentage = tasks.length > 0 ? Math.round((count / tasks.length) * 100) : 0;
              
              return (
                <div key={type} className="flex items-center justify-between p-3 bg-surface-hover rounded-lg">
                  <div className="flex items-center gap-3">
                    <span className="text-xl">{getTaskIcon(type)}</span>
                    <div>
                      <p className="font-medium text-text-primary">{name}</p>
                      <p className="text-sm text-text-secondary">{count} –∑–∞–¥–∞—á</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-text-primary">{percentage}%</p>
                    <div className="w-20 h-2 bg-gray-200 rounded-full mt-1">
                      <div 
                        className="h-2 bg-primary rounded-full"
                        style={{ width: `${percentage}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Task History */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-text-primary">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á</h2>
          <span className="text-sm text-text-secondary">{tasks.length} –∑–∞–¥–∞—á</span>
        </div>

        {tasks.length === 0 ? (
          <div className="text-center py-8 text-text-secondary">
            <Calendar size={48} className="mx-auto mb-3 opacity-50" />
            <p>–ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
          </div>
        ) : (
          <div className="space-y-3">
            {tasks.map((task) => {
              const pet = state.pets.find(p => p.id === task.petId);
              const status = getTaskStatus(task);
              
              return (
                <div key={task.id} className="flex items-center justify-between p-4 bg-surface-hover rounded-lg hover:shadow-md transition-all duration-200">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{getTaskIcon(task.type)}</span>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <h3 className="font-medium text-text-primary">{task.title}</h3>
                        {getPriorityIcon(task.priority)}
                        {status === 'completed' && <CheckCircle size={16} className="text-green-500" />}
                        {status === 'overdue' && <AlertCircle size={16} className="text-red-500" />}
                      </div>
                      <div className="text-sm text-text-secondary">
                        {getTaskTypeName(task.type)} ‚Ä¢ {pet?.name}
                      </div>
                      {task.description && (
                        <p className="text-sm text-text-muted mt-1">{task.description}</p>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center gap-3">
                    <div className="text-right">
                      <div className="text-sm font-medium text-text-primary">
                        {format(new Date(task.scheduledTime), 'dd.MM.yyyy HH:mm')}
                      </div>
                      {task.completedAt && (
                        <div className="text-xs text-text-secondary">
                          –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {format(new Date(task.completedAt), 'dd.MM.yyyy HH:mm')}
                        </div>
                      )}
                    </div>

                    <button
                      onClick={() => openTaskDetails(task)}
                      className="btn btn-secondary btn-sm"
                    >
                      <Eye size={16} />
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Task Details Modal */}
      {selectedTask && (
        <Modal
          isOpen={showTaskDetails}
          onClose={() => setShowTaskDetails(false)}
          title={`${selectedTask.title} - –î–µ—Ç–∞–ª–∏`}
          size="lg"
        >
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-lg font-semibold mb-3">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className="space-y-2">
                  <p><span className="font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> {selectedTask.title}</p>
                  <p><span className="font-medium">–¢–∏–ø:</span> {getTaskTypeName(selectedTask.type)}</p>
                  <p><span className="font-medium">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span> {selectedTask.priority}</p>
                  <p><span className="font-medium">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</span> {format(new Date(selectedTask.scheduledTime), 'dd.MM.yyyy HH:mm')}</p>
                  {selectedTask.description && <p><span className="font-medium">–û–ø–∏—Å–∞–Ω–∏–µ:</span> {selectedTask.description}</p>}
                  {selectedTask.notes && <p><span className="font-medium">–ó–∞–º–µ—Ç–∫–∏:</span> {selectedTask.notes}</p>}
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold mb-3">–°—Ç–∞—Ç—É—Å</h3>
                <div className="space-y-2">
                  <p><span className="font-medium">–°—Ç–∞—Ç—É—Å:</span> {getTaskStatus(selectedTask)}</p>
                  {selectedTask.completedAt && <p><span className="font-medium">–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span> {format(new Date(selectedTask.completedAt), 'dd.MM.yyyy HH:mm')}</p>}
                  {selectedTask.isRecurring && <p><span className="font-medium">–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:</span> {selectedTask.recurrencePattern}</p>}
                </div>
              </div>
            </div>

            {taskLogs.length > 0 && (
              <div>
                <h3 className="text-lg font-semibold mb-3">–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <div className="space-y-3">
                  {taskLogs.map((log) => (
                    <div key={log.id} className="card">
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="font-semibold">–í—ã–ø–æ–ª–Ω–µ–Ω–æ {format(new Date(log.completedAt), 'dd.MM.yyyy HH:mm')}</p>
                          {log.notes && <p className="text-text-secondary text-sm mt-1">{log.notes}</p>}
                          <div className="flex gap-4 mt-2 text-xs text-text-muted">
                            {log.duration && <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {log.duration} –º–∏–Ω</span>}
                            {log.quantity && <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {log.quantity}</span>}
                            {log.mood && <span>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {log.mood}</span>}
                          </div>
                        </div>
                        <CheckCircle size={20} className="text-green-500" />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </Modal>
      )}
    </div>
  );
};

export default History;