import React from 'react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { 
  Clock, 
  CheckCircle, 
  TrendingUp,
  Heart,
  Calendar,
  Activity,
  Plus,
  AlertCircle
} from 'lucide-react';
import { usePetContext } from '../context/PetContext';
import { useNotification } from '../context/NotificationContext';

const Dashboard: React.FC = () => {
  const { state, getCompletedTasksToday, getPendingTasksToday } = usePetContext();
  const { showNotification } = useNotification();
  
  const today = new Date();
  const completedTasks = getCompletedTasksToday();
  const pendingTasks = getPendingTasksToday();
  const totalTasks = completedTasks.length + pendingTasks.length;
  const completionRate = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;

  const getTaskIcon = (type: string) => {
    switch (type) {
      case 'feeding': return 'üçΩÔ∏è';
      case 'walk': return 'üö∂';
      case 'play': return 'üéæ';
      case 'treat': return 'üçñ';
      case 'medication': return 'üíä';
      case 'grooming': return 'üõÅ';
      case 'vet': return 'üè•';
      default: return 'üìù';
    }
  };

  const getTaskTypeName = (type: string) => {
    switch (type) {
      case 'feeding': return '–ö–æ—Ä–º–ª–µ–Ω–∏–µ';
      case 'walk': return '–ü—Ä–æ–≥—É–ª–∫–∞';
      case 'play': return '–ò–≥—Ä–∞';
      case 'treat': return '–õ–∞–∫–æ–º—Å—Ç–≤–æ';
      case 'medication': return '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ';
      case 'grooming': return '–£—Ö–æ–¥';
      case 'vet': return '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä';
      default: return '–î—Ä—É–≥–æ–µ';
    }
  };

  const handleQuickAdd = (type: 'pet' | 'task') => {
    if (type === 'pet') {
      showNotification('info', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞', '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.');
    } else {
      showNotification('info', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞', '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.');
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
          <p className="text-text-secondary mt-1">
            {format(today, 'EEEE, d MMMM yyyy', { locale: ru })}
          </p>
        </div>
        <div className="text-right">
          <div className="text-2xl font-bold text-primary">{completionRate}%</div>
          <div className="text-sm text-text-secondary">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="card hover:shadow-lg transition-all duration-200">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Heart className="text-primary" size={24} />
            </div>
            <div>
              <div className="text-2xl font-bold">{state.pets.length}</div>
              <div className="text-sm text-text-secondary">–ü–∏—Ç–æ–º—Ü–µ–≤</div>
            </div>
          </div>
        </div>

        <div className="card hover:shadow-lg transition-all duration-200">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-success/10 rounded-lg">
              <CheckCircle className="text-success" size={24} />
            </div>
            <div>
              <div className="text-2xl font-bold">{completedTasks.length}</div>
              <div className="text-sm text-text-secondary">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</div>
            </div>
          </div>
        </div>

        <div className="card hover:shadow-lg transition-all duration-200">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-warning/10 rounded-lg">
              <Clock className="text-warning" size={24} />
            </div>
            <div>
              <div className="text-2xl font-bold">{pendingTasks.length}</div>
              <div className="text-sm text-text-secondary">–û–∂–∏–¥–∞—é—Ç</div>
            </div>
          </div>
        </div>

        <div className="card hover:shadow-lg transition-all duration-200">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-info/10 rounded-lg">
              <Activity className="text-info" size={24} />
            </div>
            <div>
              <div className="text-2xl font-bold">{state.tasks.length}</div>
              <div className="text-sm text-text-secondary">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="card">
        <h2 className="text-lg font-semibold mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <button 
            className="flex items-center gap-3 p-4 bg-surface-hover rounded-lg hover:bg-surface transition-all duration-200"
            onClick={() => handleQuickAdd('pet')}
          >
            <div className="p-2 bg-primary/10 rounded-lg">
              <Plus className="text-primary" size={20} />
            </div>
            <div className="text-left">
              <div className="font-medium">–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞</div>
              <div className="text-sm text-text-secondary">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞</div>
            </div>
          </button>

          <button 
            className="flex items-center gap-3 p-4 bg-surface-hover rounded-lg hover:bg-surface transition-all duration-200"
            onClick={() => handleQuickAdd('task')}
          >
            <div className="p-2 bg-success/10 rounded-lg">
              <Calendar className="text-success" size={20} />
            </div>
            <div className="text-left">
              <div className="font-medium">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</div>
              <div className="text-sm text-text-secondary">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞</div>
            </div>
          </button>
        </div>
      </div>

      {/* Today's Tasks */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Pending Tasks */}
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold">–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏</h2>
            <span className="badge badge-warning">{pendingTasks.length}</span>
          </div>
          
          {pendingTasks.length === 0 ? (
            <div className="text-center py-8 text-text-secondary">
              <Clock size={48} className="mx-auto mb-3 opacity-50" />
              <p>–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á</p>
            </div>
          ) : (
            <div className="space-y-3">
              {pendingTasks.slice(0, 5).map((task) => {
                const pet = state.pets.find(p => p.id === task.petId);
                const isOverdue = new Date(task.scheduledTime) < new Date();
                
                return (
                  <div key={task.id} className="flex items-center justify-between p-3 bg-surface-hover rounded-lg">
                    <div className="flex items-center gap-3">
                      <span className="text-xl">{getTaskIcon(task.type)}</span>
                      <div>
                        <div className="font-medium">{task.title}</div>
                        <div className="text-sm text-text-secondary">
                          {pet?.name} ‚Ä¢ {getTaskTypeName(task.type)}
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-sm font-medium">
                        {format(new Date(task.scheduledTime), 'HH:mm')}
                      </div>
                      {isOverdue && (
                        <div className="text-xs text-danger flex items-center gap-1">
                          <AlertCircle size={12} />
                          –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Completed Tasks */}
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</h2>
            <span className="badge badge-success">{completedTasks.length}</span>
          </div>
          
          {completedTasks.length === 0 ? (
            <div className="text-center py-8 text-text-secondary">
              <CheckCircle size={48} className="mx-auto mb-3 opacity-50" />
              <p>–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</p>
            </div>
          ) : (
            <div className="space-y-3">
              {completedTasks.slice(0, 5).map((task) => {
                const pet = state.pets.find(p => p.id === task.petId);
                
                return (
                  <div key={task.id} className="flex items-center justify-between p-3 bg-success/5 rounded-lg">
                    <div className="flex items-center gap-3">
                      <span className="text-xl">{getTaskIcon(task.type)}</span>
                      <div>
                        <div className="font-medium">{task.title}</div>
                        <div className="text-sm text-text-secondary">
                          {pet?.name} ‚Ä¢ {getTaskTypeName(task.type)}
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-sm font-medium">
                        {task.completedAt && format(new Date(task.completedAt), 'HH:mm')}
                      </div>
                      <div className="text-xs text-success flex items-center gap-1">
                        <CheckCircle size={12} />
                        –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Recent Activity */}
      <div className="card">
        <h2 className="text-lg font-semibold mb-4">–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
        <div className="space-y-3">
          {state.taskLogs.slice(0, 10).map((log) => {
            const task = state.tasks.find(t => t.id === log.taskId);
            const pet = state.pets.find(p => p.id === log.petId);
            
            return (
              <div key={log.id} className="flex items-center gap-3 p-3 bg-surface-hover rounded-lg">
                <div className="w-2 h-2 bg-primary rounded-full"></div>
                <div className="flex-1">
                  <div className="text-sm">
                    <span className="font-medium">{task?.title}</span> –¥–ª—è{' '}
                    <span className="font-medium">{pet?.name}</span>
                  </div>
                  <div className="text-xs text-text-secondary">
                    {format(new Date(log.completedAt), 'dd.MM.yyyy HH:mm')}
                  </div>
                </div>
              </div>
            );
          })}
          
          {state.taskLogs.length === 0 && (
            <div className="text-center py-8 text-text-secondary">
              <Activity size={48} className="mx-auto mb-3 opacity-50" />
              <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;